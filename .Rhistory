ggplot(aes(value)) +
facet_wrap(~ key, scales = "blue") +
geom_histogram()
train %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "fixed") +
geom_histogram()
train %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "fixed")
library(purrr)
train %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "fixed")
train %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "fixed") +
geom_histogram()
train %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "fixed") +
geom_density()
train %>%
keep(is.numeric) %>%
gather() %>%
ggplot() +
facet_wrap(~ key, scales = "fixed") +
geom_density()
dev.off()
train %>%
keep(is.numeric) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "fixed") +
geom_density()
# dummifying Categorical(Factor) columns
t <- dummyVars("~.", data = train, drop2nd = TRUE)
train <- data.frame(predict(t, newdata = train))
# Running a preliminary multiple linear model to evaluate the relevance of all variables
model<- lm(SalePrice ~ .,  data = train)
summary(model)
#Selecting all variables with P value < 0.05
tm <- tidy(model)
# visualise dataframe of the model (using non scientific notation of numbers)
options(scipen = 999)
train_rel <- tm$term[tm$p.value < 0.05]
#obtaining a data frame with the column names that match the previous condition
train_rel <- train %>%
select(train_rel)
#adding Saleprice to new data set
train_rel["SalePrice"] <- train$SalePrice
# running a nwe lm including only features with p-value smaller than 0.05
summary(lm(SalePrice ~ .,  data = train_rel))
library(ggplot2)
library(tidyverse)
library(dummies)
library(class)
library(corrplot)
library(caret)
library(broom)
library(purrr)
library(ggplot2)
#uploading data sets
train = read.csv("./Data/train.csv", stringsAsFactors = FALSE)
# Taking a look at the head
head(train)
# taking a look at the summary
summary(train)
train <- read.csv('./Data/train_relevant')
ggplot(train_rel, aes(x = SalePrice, fill = ..count..)) +
geom_histogram(binwidth = 5000) +
ggtitle("Figure 1 Histogram of SalePrice") +
ylab("Count of houses") +
xlab("Housing Price") +
theme(plot.title = element_text(hjust = 0.5))
train_rel <- read.csv('./Data/train_relevant')
ggplot(train_rel, aes(x = SalePrice, fill = ..count..)) +
geom_histogram(binwidth = 5000) +
ggtitle("Figure 1 Histogram of SalePrice") +
ylab("Count of houses") +
xlab("Housing Price") +
theme(plot.title = element_text(hjust = 0.5))
# Deleting outliers
train_rel <- train_rel[-which(train_rel$LotArea > 30000),]
#plot without outliers
qplot(train_rel$LotArea, train_rel$SalePrice, main = "Without Outliers")
ggplot(train_rel, aes(x = SalePrice, fill = ..count..)) +
geom_histogram(binwidth = 5000) +
ggtitle("Figure 1 Histogram of SalePrice") +
ylab("Count of houses") +
xlab("Housing Price") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(train_rel, aes(x = SalePrice, fill = ..count..)) +
geom_histogram(binwidth = 5000) +
ggtitle("Figure 1 Histogram of SalePrice") +
ylab("Count of houses") +
xlab("Housing Price") +
theme(plot.title = element_text(hjust = 0.5))
model <- lm(SalePrice ~ .,  data = train_rel)
plot(model)
pairs(train[1:8], pch = 21)
hist(train_rel$SalePrice, probability = F)
hist(train_rel$SalePrice)
#log term of SalePrice
select_train$lSalePrice <- log(select_train$SalePrice)
#log term of SalePrice
train_rel$lSalePrice <- log(train_rel$SalePrice)
# Evaluating the distribution
ggplot(train_rel, aes(x = SalePrice, fill = ..count..)) +
geom_histogram(binwidth = 5000) +
ggtitle("Figure 1 Histogram of SalePrice") +
ylab("Count of houses") +
xlab("Housing Price") +
theme(plot.title = element_text(hjust = 0.5))
corrplot(train[1:8], pch = 21)
corrplot(train)
corrplot(train_rel)
plot(cor(train_rel))
train_rel <- read.csv('./Data/train_relevant')
hist(train_rel$SalePrice, probability = F)
# evaluate relevant variables and plot with and without outliers
qplot(train_rel$LotArea, train_rel$SalePrice, main = "With Outliers")
# Deleting outliers
train_rel <- train_rel[-which(train_rel$LotArea > 30000),]
#plot without outliers
qplot(train_rel$LotArea, train_rel$SalePrice, main = "Without Outliers")
# Evaluating the distribution
ggplot(train_rel, aes(x = SalePrice, fill = ..count..)) +
geom_histogram(binwidth = 5000) +
ggtitle("Figure 1 Histogram of SalePrice") +
ylab("Count of houses") +
xlab("Housing Price") +
theme(plot.title = element_text(hjust = 0.5))
#log term of SalePrice sinse the data is skewed to the left
train_rel$lSalePrice <- log(train_rel$SalePrice)
# re evaluating the distribution
ggplot(train_rel, aes(x = SalePrice, fill = ..count..)) +
geom_histogram(binwidth = 5000) +
ggtitle("Figure 1 Histogram of SalePrice") +
ylab("Count of houses") +
xlab("Housing Price") +
theme(plot.title = element_text(hjust = 0.5))
plot(cor(train_rel))
pairs(cor(train_rel))
pairs(train_rel)
# Evaluating the distribution
ggplot(train_rel, aes(x = SalePrice, fill = ..count..)) +
geom_histogram(binwidth = 5000) +
ggtitle("Figure 1 Histogram of SalePrice") +
ylab("Count of houses") +
xlab("Housing Price") +
theme(plot.title = element_text(hjust = 0.5))
#plot without outliers
qplot(train_rel$LotArea, train_rel$SalePrice, main = "Without Outliers")
# Evaluating the distribution
ggplot(train_rel, aes(x = SalePrice, fill = ..count..)) +
geom_histogram(binwidth = 5000) +
ggtitle("Figure 1 Histogram of SalePrice") +
ylab("Count of houses") +
xlab("Housing Price") +
theme(plot.title = element_text(hjust = 0.5))
#log term of SalePrice sinse the data is skewed to the left
train_rel$lSalePrice <- log(train_rel$SalePrice)
# re evaluating the distribution
ggplot(train_rel, aes(x = SalePrice, fill = ..count..)) +
geom_histogram(binwidth = 5000) +
ggtitle("Figure 1 Histogram of SalePrice") +
ylab("Count of houses") +
xlab("Housing Price") +
theme(plot.title = element_text(hjust = 0.5))
train_rel <- read.csv('./Data/train_relevant')
hist(train_rel$SalePrice, probability = F)
# evaluate relevant variables and plot with and without outliers
qplot(train_rel$LotArea, train_rel$SalePrice, main = "With Outliers")
# Deleting outliers
train_rel <- train_rel[-which(train_rel$LotArea > 30000),]
#plot without outliers
qplot(train_rel$LotArea, train_rel$SalePrice, main = "Without Outliers")
train_rel <- read.csv('./Data/train_relevant')
# evaluate relevant variables and plot with and without outliers
qplot(train_rel$LotArea, train_rel$SalePrice, main = "With Outliers")
# evaluate relevant variables and plot with and without outliers
qplot(train_rel$LotArea, train_rel$SalePrice, main = "With Outliers", x = "LotArea", y = "SalePrice")
# evaluate relevant variables and plot with and without outliers
qplot(train_rel$LotArea, train_rel$SalePrice, main = "With Outliers",xlab = "Lot Area", ylab = "Sale Price")
# Deleting outliers
train_rel <- train_rel[-which(train_rel$LotArea > 30000),]
train_rel <- read.csv('./Data/train_relevant')
# Deleting outliers
train_rel <- train_rel[-which(train_rel$LotArea > 30000)]
View(train_rel)
train_rel <- read.csv('./Data/train_relevant')
# Deleting outliers
train_rel <- train_rel[-which(train_rel$LotArea > 30000 & train$SalePrice < 3e+05),]
# Deleting outliers
train_rel <- train_rel[-which(train_rel$LotArea > 30000 & train_rel$SalePrice < 3e+05),]
train_rel <- read.csv('./Data/train_relevant')
# Deleting outliers
train_rel <- train_rel[!which(train_rel$LotArea > 30000 & train_rel$SalePrice < 3e+05),]
train_rel <- read.csv('./Data/train_relevant')
# Deleting outliers
train_rel <- train_rel[!(train_rel$LotArea > 30000),]
#plot without outliers
qplot(train_rel$LotArea, train_rel$SalePrice, main = "Without Outliers",xlab = "Lot Area", ylab = "Sale Price")
# Deleting outliers
train_rel <- train_rel[-(train_rel$LotArea > 30000),]
# Deleting outliers
train_rel <- train_rel[which(train_rel$LotArea > 30000),]
train_rel <- read.csv('./Data/train_relevant')
# Deleting outliers
train_re <- train_rel[which(train_rel$LotArea > 30000),]
#plot without outliers
qplot(train_rel$LotArea, train_rel$SalePrice, main = "Without Outliers",xlab = "Lot Area", ylab = "Sale Price")
#uploading data sets
train = read.csv("./Data/train.csv", stringsAsFactors = FALSE)
# Droping column ID
train <- train[, -1]
# transforming numerical columns that should be considered categorical
train$MSSubClass = as.character(train$MSSubClass)
train$YearRemodAdd = as.character(train$YearRemodAdd)
# Percentage of data missing in the data frame (0.05889565)
sum(is.na(train)) / (nrow(train) *ncol(train))
# counting missing values per column
data.frame(sapply(train, function(y) sum(length(which(is.na(y))))))
# Imputing missing data with the mean of each numerical column
for(i in 1:ncol(train)){
train[is.na(train[,i]), i] <- mean(train[,i], na.rm = TRUE)
}
# Erasing columns with too many missing values
train <- train[ , -which(names(train) %in% c("Alley","PoolQC", "Fence",
"MiscFeature", "FireplaceQu"))]
# Deleting rows with remaining missing values
train <- train[complete.cases(train), ]
# Counting missing values again
sum(is.na(train)) / (nrow(train) *ncol(train))
# dummifying Categorical(Factor) columns
t <- dummyVars("~.", data = train, drop2nd = TRUE)
train <- data.frame(predict(t, newdata = train))
# Running a preliminary multiple linear model to evaluate the relevance of all variables
model<- lm(SalePrice ~ .,  data = train)
summary(model)
#Selecting all variables with P value < 0.05
tm <- tidy(model)
# visualise dataframe of the model (using non scientific notation of numbers)
options(scipen = 999)
train_rel <- tm$term[tm$p.value < 0.05]
#obtaining a data frame with the column names that match the previous condition
train_rel <- train %>%
select(train_rel)
#adding Saleprice to new data set
train_rel["SalePrice"] <- train$SalePrice
# running a nwe lm including only features with p-value smaller than 0.05
summary(lm(SalePrice ~ .,  data = train_rel))
# drawing a historgram of SalePrice
hist(train_rel$SalePrice, probability = F)
# evaluate relevant variables and plot with and without outliers
qplot(train_rel$LotArea, train_rel$SalePrice, main = "With Outliers",xlab = "Lot Area", ylab = "Sale Price")
# Deleting outliers
train_re <- train_rel[-which(train_rel$LotArea > 30000),]
#plot without outliers
qplot(train_rel$LotArea, train_rel$SalePrice, main = "Without Outliers",xlab = "Lot Area", ylab = "Sale Price")
#plot without outliers
qplot(train_rel$LotArea, train_rel$SalePrice, main = "Without Outliers",xlab = "Lot Area", ylab = "Sale Price")
# Evaluating the distribution
ggplot(train_rel, aes(x = SalePrice, fill = ..count..)) +
geom_histogram(binwidth = 5000) +
ggtitle("Figure 1 Histogram of SalePrice") +
ylab("Count of houses") +
xlab("Housing Price") +
theme(plot.title = element_text(hjust = 0.5))
#log term of SalePrice sinse the data is skewed to the left
train_rel$lSalePrice <- log(train_rel$SalePrice)
# re evaluating the distribution
ggplot(train_rel, aes(x = SalePrice, fill = ..count..)) +
geom_histogram(binwidth = 5000) +
ggtitle("Figure 1 Histogram of SalePrice") +
ylab("Count of houses") +
xlab("Housing Price") +
theme(plot.title = element_text(hjust = 0.5))
# writing file with cleaned dummified data
write.csv(train, "train_wrangled", row.names=FALSE)
write.csv(train_rel, "train_relevant", row.names=FALSE )
#plot without outliers
qplot(train_rel$LotArea, train_rel$SalePrice, main = "Without Outliers",xlab = "Lot Area", ylab = "Sale Price")
# Deleting outliers
train_rel <- train_rel[-which(train_rel$LotArea > 30000),]
#plot without outliers
qplot(train_rel$LotArea, train_rel$SalePrice, main = "Without Outliers",xlab = "Lot Area", ylab = "Sale Price")
# Evaluating the distribution
ggplot(train_rel, aes(x = SalePrice, fill = ..count..)) +
geom_histogram(binwidth = 5000) +
ggtitle("Figure 1 Histogram of SalePrice") +
ylab("Count of houses") +
xlab("Housing Price") +
theme(plot.title = element_text(hjust = 0.5))
#log term of SalePrice sinse the data is skewed to the left
train_rel$lSalePrice <- log(train_rel$SalePrice)
# re evaluating the distribution
ggplot(train_rel, aes(x = SalePrice, fill = ..count..)) +
geom_histogram(binwidth = 5000) +
ggtitle("Figure 1 Histogram of SalePrice") +
ylab("Count of houses") +
xlab("Housing Price") +
theme(plot.title = element_text(hjust = 0.5))
#log term of SalePrice sinse the data is skewed to the left
train_rel$SalePrice <- log(train_rel$SalePrice)
#log term of SalePrice sinse the data is skewed to the left
train_rel$SalePrice <- log(train_rel$SalePrice)
# re evaluating the distribution
ggplot(train_rel, aes(x = SalePrice, fill = ..count..)) +
geom_histogram(binwidth = 5000) +
ggtitle("Figure 1 Histogram of SalePrice") +
ylab("Count of houses") +
xlab("Housing Price") +
theme(plot.title = element_text(hjust = 0.5))
train_rel <- read.csv('./Data/train_relevant')
# Evaluating the distribution
ggplot(train_rel, aes(x = SalePrice, fill = ..count..)) +
geom_histogram(binwidth = 5000) +
ggtitle("Figure 1 Histogram of SalePrice") +
ylab("Count of houses") +
xlab("Housing Price") +
theme(plot.title = element_text(hjust = 0.5))
#log term of SalePrice sinse the data is skewed to the left
train_rel$SalePrice <- log(train_rel$SalePrice)
# re evaluating the distribution
ggplot(train_rel, aes(x = SalePrice, fill = ..count..)) +
geom_histogram(binwidth = 5000) +
ggtitle("Figure 1 Histogram of SalePrice") +
ylab("Count of houses") +
xlab("Housing Price") +
theme(plot.title = element_text(hjust = 0.5))
View(train_rel)
# re evaluating the distribution
ggplot(train_rel, aes(x = SalePrice, fill = ..count..)) +
geom_histogram(binwidth = 0.05) +
ggtitle("Figure 2 Histogram of log SalePrice") +
ylab("Count of houses") +
xlab("Housing Price") +
theme(plot.title = element_text(hjust = 0.5))
plot(model)
library(moments)
library(MASS)
install.packages("moments")
library(moments)
skewness(train_rel[[x]], na.rm = TRUE)
box(train_rel, standardize = TRUE)
boxcox(train_rel, standardize = TRUE)
system("python rory/_3_engineer_features.py")
system("python rory/main.py")
setwd("C:/Users/Usuario/Desktop/Machine-Learning-NYCDSA")
system("python rory/main.py")
system("python rory/main.py")
cdplot(SalePrice ~ ., data=train_rel)
cdplot(SalePrice ~ LotConfigFR3, data=train_rel)
View(train_rel)
colnames(train_rel)
cdplot(SalePrice ~ YearRemodAdd1997, data=train_rel)
# visualizing lineal model
model1 <- lm(SalePrice ~ .,  data = train_rel)
plot(model1)
train_rel <- read.csv('./Data/train_relevant')
# visualizing lineal model
model1 <- lm(SalePrice ~ .,  data = train_rel)
plot(model1)
plot(model1)
# drawing a historgram of SalePrice
hist(train_rel$SalePrice, probability = F)
# evaluate relevant variables and plot with and without outliers
qplot(train_rel$LotArea, train_rel$SalePrice, main = "With Outliers",xlab = "Lot Area", ylab = "Sale Price")
# Deleting outliers
train_rel <- train_rel[-which(train_rel$LotArea > 30000),]
#plot without outliers
qplot(train_rel$LotArea, train_rel$SalePrice, main = "Without Outliers",xlab = "Lot Area", ylab = "Sale Price")
x <- train[1:10]
# evaluate relevant variables and plot with and without outliers
qplot(train_rel$LotArea, train_rel$SalePrice, main = "With Outliers",xlab = "Lot Area", ylab = "Sale Price")
train_rel <- read.csv('./Data/train_relevant')
# evaluate relevant variables and plot with and without outliers
qplot(train_rel$LotArea, train_rel$SalePrice, main = "With Outliers",xlab = "Lot Area", ylab = "Sale Price")
# Evaluating the distribution
ggplot(train_rel, aes(x = SalePrice, fill = ..count..)) +
geom_histogram(binwidth = 5000) +
ggtitle("Figure 1 Histogram of SalePrice") +
ylab("Count of houses") +
xlab("Housing Price") +
theme(plot.title = element_text(hjust = 0.5))
#log term of SalePrice sinse the data is skewed to the left
train_rel$SalePrice <- log(train_rel$SalePrice)
# re evaluating the distribution
ggplot(train_rel, aes(x = SalePrice, fill = ..count..)) +
geom_histogram(binwidth = 0.05) +
ggtitle("Figure 2 Histogram of log SalePrice") +
ylab("Count of houses") +
xlab("Housing Price") +
theme(plot.title = element_text(hjust = 0.5))
cdplot(SalePrice ~ YearRemodAdd1997, data=train_rel)
# writing file with cleaned dummified data
write.csv(train_rel, "train_relevant", row.names=FALSE )
system("python rory/_4_r_cleaned.py")
system("python rory/_4_r_cleaned.py")
system("python rory/_4_r_cleaned.py")
cdplot(SalePrice ~ YearRemodAdd1997, data=train_rel)
cdplot(SalePrice ~ PlotArea, data=train_rel)
cdplot(SalePrice ~ LotArea, data=train_rel)
plot_a + geom_point(LotArea)
plot_a <- ggplot(train_rel, aes(x= SalePrice))
plot_a + geom_point(LotArea)
plot_a <- ggplot(train_rel, aes(x= SalePrice, y = LotArea))
plot_a + geom_point()
plot_a <- ggplot(train_rel, aes(x= SalePrice, y = LotArea)) +
geom_point() +
grom_smooth()
plot_a <- ggplot(train_rel, aes(x= SalePrice, y = LotArea)) +
geom_point() +
geom_smooth()
plot_a <- ggplot(train_rel, aes(x= SalePrice, y = LotArea)) +
geom_smooth()
plot_a <- ggplot(train_rel, aes(x= SalePrice, y = LotArea)) +
geom_smooth()
plot_a <- ggplot(train_rel, aes(x= SalePrice, y = LotArea)) +
geom_smooth()
ggplot(train_rel, aes(x= SalePrice, y = LotArea)) +
geom_smooth()
ggplot(train_rel, aes(x= SalePrice, y = LotArea)) +
geom_point()
ggplot(train_rel, aes(x= SalePrice, y = LotArea)) +
geom_point()+
geom_abline()
ggplot(train_rel, aes(x= SalePrice, y = LotArea)) +
geom_point()+
geom_smooth()
# Plotting Sale price compared to lotArea
ggplot(train_rel, aes(x= SalePrice, y = LotArea)) +
geom_point( color )+
geom_smooth()
# Plotting Sale price compared to lotArea
ggplot(train_rel, aes(x= SalePrice, y = LotArea)) +
geom_point( color = "red" )+
geom_smooth()
# Plotting Sale price compared to lotArea
ggplot(train_rel, aes(x= SalePrice, y = LotArea)) +
geom_point( color = "skyblue" )+
geom_smooth()
# Plotting Sale price compared to lotArea
ggplot(train_rel, aes(x= SalePrice, y = LotArea)) +
geom_point()+
geom_smooth()
# Plotting Sale price compared to lotArea
ggplot(train_rel, aes(x= SalePrice, y = LotArea)) +
geom_point(stroke )+
geom_smooth()
# Plotting Sale price compared to lotArea
ggplot(train_rel, aes(x= SalePrice, y = LotArea)) +
geom_point(stroke = )+
geom_smooth()
# Plotting Sale price compared to lotArea
ggplot(train_rel, aes(x= SalePrice, y = LotArea)) +
geom_point()+
geom_smooth(method=lm , color="red", se=FALSE)
# Plotting Sale price compared to lotArea
ggplot(train_rel, aes(x= SalePrice, y = LotArea)) +
geom_point()+
geom_smooth(method=lm , color="blue", se=FALSE)
# Plotting Sale price compared to lotArea
plot_1 <- ggplot(train_rel, aes(x= SalePrice, y = LotArea)) +
geom_point()+
geom_smooth(method=lm , color="blue", se=FALSE) +
ggtitle("Scatterplot of Sale Price vs Lot Area") +
theme(plot.title = element_text(hjust = 0.4))
plot_1
# Plotting Sale price compared to lotArea
plot_2 <- ggplot(train_rel, aes(x= SalePrice, y = YearBuilt)) +
geom_point()+
geom_smooth(method=lm , color="blue", se=FALSE) +
ggtitle("Scatterplot of Sale Price vs Lot Area") +
theme(plot.title = element_text(hjust = 0.4))
plot_2
# Plotting Sale price compared to lotArea
plot_3 <- ggplot(train_rel, aes(x= SalePrice, y = WoodDeckSF)) +
geom_point()+
geom_smooth(method=lm , color="blue", se=FALSE) +
ggtitle("Scatterplot of Sale Price vs Lot Area") +
theme(plot.title = element_text(hjust = 0.4))
plot_3
##############################
#####Classification Trees#####
##############################
#Loading the tree library for fitting classification and regression trees.
library(tree)
install.packages("tree")
library("treemap", lib.loc="~/R/win-library/3.5")
##############################
#####Classification Trees#####
##############################
#Loading the tree library for fitting classification and regression trees.
library(tree)
install.packages(c("dbplyr", "digest", "dplyr", "DT", "fs", "ggthemes", "googleVis", "gower", "hexbin", "ipred", "jomo", "knitr", "Lahman", "mice", "pillar", "processx", "progress", "raster", "rcmdcheck", "reprex", "rmarkdown", "robustbase", "rvest", "shiny", "sparklyr", "survey", "swirl", "sys", "testthat", "tinytex", "xfun", "xtable", "zip"))
install.packages(c("dbplyr", "digest", "dplyr", "DT", "fs", "ggthemes", "googleVis", "gower", "hexbin", "ipred", "jomo", "knitr", "Lahman", "mice", "pillar", "processx", "progress", "raster", "rcmdcheck", "reprex", "rmarkdown", "robustbase", "rvest", "shiny", "sparklyr", "survey", "swirl", "sys", "testthat", "tinytex", "xfun", "xtable", "zip"))
install.packages(c("dbplyr", "digest", "dplyr", "DT", "fs", "ggthemes", "googleVis", "gower", "hexbin", "ipred", "jomo", "knitr", "Lahman", "mice", "pillar", "processx", "progress", "raster", "rcmdcheck", "reprex", "rmarkdown", "robustbase", "rvest", "shiny", "sparklyr", "survey", "swirl", "sys", "testthat", "tinytex", "xfun", "xtable", "zip"))
install.packages(c("dbplyr", "digest", "dplyr", "DT", "fs", "ggthemes", "googleVis", "gower", "hexbin", "ipred", "jomo", "knitr", "Lahman", "mice", "pillar", "processx", "progress", "raster", "rcmdcheck", "reprex", "rmarkdown", "robustbase", "rvest", "shiny", "sparklyr", "survey", "swirl", "sys", "testthat", "tinytex", "xfun", "xtable", "zip"))
install.packages(c("dbplyr", "digest", "dplyr", "DT", "fs", "ggthemes", "googleVis", "gower", "hexbin", "ipred", "jomo", "knitr", "Lahman", "mice", "pillar", "processx", "progress", "raster", "rcmdcheck", "reprex", "rmarkdown", "robustbase", "rvest", "shiny", "sparklyr", "survey", "swirl", "sys", "testthat", "tinytex", "xfun", "xtable", "zip"))
